// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Restaurant    Restaurant[]
    Review        Review[]
    Tour          Tour[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Restaurant {
    id        String     @id @default(cuid())
    name      String
    address   String
    city      String
    state     String
    zip       Int
    lat       Float
    lng       Float
    phone     String?
    website   String?
    email     String?
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    userId    String
    createdBy User       @relation(fields: [userId], references: [id])
    Review    Review[]
    TourStop  TourStop[]
}

model Review {
    id           String     @id @default(cuid())
    title        String
    text         String
    rating       Int
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    userId       String
    restaurantId String
    createdBy    User       @relation(fields: [userId], references: [id])
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model TourStop {
    id           String     @id @default(cuid())
    restaurantId String
    tourId       String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    tour         Tour @relation(fields: [tourId], references: [id])
}

model Tour {
    id        String     @id @default(cuid())
    name      String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    userId    String
    createdBy User       @relation(fields: [userId], references: [id])
    TourStop  TourStop[]
}
